# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NqfXXQJ8-7ZXZKXBc4Ra0nNebKPst3v7
"""

from google.colab import drive
drive.mount('/content/drive')

# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
import shap

# Load the dataset
data = pd.read_csv("chronic_disease_data.csv")  # Replace with your file path


# Data Cleaning
data = data.dropna()  # Alternatively, use imputation for missing values

# Feature Engineering - calculating BMI as an example
data['BMI'] = data['weight'] / (data['height'] / 100) ** 2

# Exploratory Analysis - visualize age distribution
sns.histplot(data['age'], kde=True)
plt.title("Age Distribution of Patients")
plt.show()

# Splitting the dataset into features (X) and target (y) for disease prediction
X = data.drop(columns=['disease_label'])  # Adjust target column name
y = data['disease_label']


# Inspect unique values
print("Unique values in y:", y.unique())

# Use LabelEncoder if y contains categorical data
le = LabelEncoder()
y = le.fit_transform(y)

# Encode categorical features
X = pd.get_dummies(X, drop_first=True)

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Re-align columns for consistency
X_train, X_test = X_train.align(X_test, join='inner', axis=1)

# Ensure target labels are in a valid format (e.g., integers)
y_train = y_train.astype(int)  # Convert to integers if needed


# Model Training
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

# Evaluate model performance
print("Disease Prediction Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# # Model 1: Disease Prediction - Random Forest Classifier
# rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
# rf_model.fit(X_train, y_train)
# y_pred = rf_model.predict(X_test)
# print("Disease Prediction Accuracy:", accuracy_score(y_test, y_pred))
# print("Classification Report:\n", classification_report(y_test, y_pred))

# SHAP Explainability
explainer = shap.TreeExplainer(rf_model)
shap_values = explainer.shap_values(X_test)
shap.summary_plot(shap_values, X_test, plot_type="bar")

# Function for Personalized Health Recommendations
# Function for Personalized Health Recommendations
def health_recommendations(patient_data):
    recommendations = []

    # Check if the column exists before accessing it
    if 'BMI' in patient_data and patient_data['BMI'] > 25:
        recommendations.append("Consider a balanced diet and regular exercise.")
    if 'smoking_status' in patient_data and patient_data['smoking_status'] == "Yes":
        recommendations.append("Reduce or quit smoking to lower risk of chronic diseases.")
    if 'activity_level' in patient_data and patient_data['activity_level'] < 3:
        recommendations.append("Increase physical activity for better cardiovascular health.")

    return recommendations


# Example usage
sample_patient = X_test.iloc[0]
recommendations = health_recommendations(sample_patient)
print("Recommendations for Sample Patient:", recommendations)

"""# New Section

# New Section
"""

from sklearn.preprocessing import LabelEncoder

# Apply Label Encoding to the 'gender' column
label_encoder = LabelEncoder()
data['gender'] = label_encoder.fit_transform(data['gender'])